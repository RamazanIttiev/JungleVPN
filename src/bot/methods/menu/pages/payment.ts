import { BotContext } from '@bot/bot.model';
import { goToDevicesPage } from '@bot/methods/menu/routes';
import { Menu } from '@bot/navigation/menu';
import { initialSession } from '@session/session.model';

export const createPaymentMenu = () => {
  const menu = new Menu('payment-menu');

  menu.dynamic(async (ctx, range) => {
    const paymentUrl = ctx.session.paymentUrl;
    if (paymentUrl) {
      range.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', paymentUrl);
    }
  });

  menu
    .text('–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ', async (ctx) => {
      const paymentId = ctx.session.paymentId;
      const tgUser = ctx.services.bot.validateUser(ctx.from);

      if (!paymentId) {
        await ctx.reply('–≠—Ç–æ –∫–∞–∂–µ—Ç—Å—è —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        return;
      }

      const status = await ctx.services.payments.checkPaymentStatus(paymentId);

      if (status === 'succeeded') {
        await ctx.services.users.updateExpiryTime(tgUser.id, ctx.session.selectedPeriod!);
        await ctx.services.payments.updatePayment(paymentId, { status, paidAt: new Date() });
        ctx.session = initialSession();
        await goToDevicesPage(ctx);
      } else {
        await ctx.reply('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ–ø–ª–∞—á–µ–Ω. –£–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç—ã –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É?');
      }
    })
    .row();

  return menu;
};
